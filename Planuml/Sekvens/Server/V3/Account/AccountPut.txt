frame AccountController - PUT

participant "AccountController" as controller
participant "AccountContext" as context
participant "AccountItem" as Item


==HttpPut(id)==

activate controller
controller->context: PutAccountItem(id, accountItem)
activate context

alt id != accountItem.AccountId
context-->>controller: BadRequest()
deactivate context
else 
activate context
context->Item:_context.Entry(accountItem).State
activate Item


Item-->>context: Success
deactivate Item
alt Pass
context-->>controller: NoContent()
deactivate context
else Catch
alt if(!AccountItemExists(id)
activate context
context-->>controller: NotFound()
deactivate context
else 
activate context
context-->>controller: throw
deactivate context
deactivate controller
end 
end 
end 
==HttpPut(id/balance)==
activate controller
controller->context: PutAccountItemBalance(id, amount)
activate context
context->Item: AccountItems.FindAsync(id)
activate Item
Item-->>context: AccountItem
deactivate Item
alt  if(accountItem==null)
context-->>controller: NotFound()
deactivate context
else if(accountItem.Balance + amount)<0)
activate context
context-->>controller: BadRequest()
deactivate context
else
activate context
context->Item: _context.Entry(accountItem).State
activate Item

Item-->>context: Status
deactivate Item
alt Status == success
context-->>controller: NoContent()
deactivate context
else Status == error
activate context
alt if (!AccountItemExists(id))
context-->>controller: NotFound()
deactivate context
else 
activate context
context-->>controller: throw
deactivate context
deactivate controller
end
end 
end